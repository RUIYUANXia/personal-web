{"version":3,"sources":["webpack:///./src/pages/projects.tsx"],"names":["Project","styled","div","props","textColor","colors","textBodyDark","textBodyLight","media","small","ProjectTitle","Title","ProjectSubtitle","span","textSize","ProjectDescription","p","normal","ProjectImage","Img","LightProjectButton","LightButton","DarkProjectButton","DarkButton","Projects","_ref2","data","allMdx","edges","projects","React","createElement","Layout","title","map","_ref3","index","node","project","key","fields","id","style","backgroundColor","frontmatter","Fade","left","right","PageWrapper","fluid","image","childImageSharp","as","subtitle","description","detailsPageLink","_ref","Button","to","theme","ThemeEnum","dark","renderProjectButton"],"mappings":"2FACA,2LAiBA,MAAMA,EAAUC,IAAOC,GAAiB;;;aAG3BC,GACe,UAApBA,EAAMC,UAAwBC,IAAOC,aAAeD,IAAOE;;MAE7DC,IAAMC,KAAK;;;EAKXC,EAAeT,YAAOU,IAAM;;;;;MAK5BH,IAAMC,KAAK;;;EAKXG,EAAkBX,IAAOY,IAAI;MAC7BC,IAASL;;;EAKTM,EAAqBd,IAAOe,CAAC;MAC7BF,IAASG;;;;EAMTC,EAAejB,YAAOkB,IAAI;;;;;MAK1BX,IAAMC,KAAK;;;EAKXW,EAAqBnB,YAAOoB,IAAY;;EAIxCC,EAAoBrB,YAAOsB,IAAW;;EAsB/BC,EAAWC,IAIH,IAHjBC,MACIC,QAAUC,MAAOC,KAETJ,EACZ,OACIK,IAAAC,cAACC,IAAM,CAACC,MAAM,qBACTJ,EAASK,IAAI,CAAAC,EAAoBC,KAAK,IAAtBC,KAAMC,GAASH,EAAA,OAC5BL,IAAAC,cAAC/B,EAAO,CACJuC,IAAKD,EAAQE,OAAOC,GACpBC,MAAO,CAAEC,gBAAiBL,EAAQM,YAAYD,iBAC9CvC,UAAWkC,EAAQM,YAAYxC,WAE/B0B,IAAAC,cAACc,IAAUT,EAAQ,GAAM,EAAI,CAAEU,MAAM,GAAS,CAAEC,OAAO,GACnDjB,IAAAC,cAACiB,IAAW,KACRlB,IAAAC,cAACb,EAAY,CACT+B,MACIX,EAAQM,YAAYM,MAAMC,gBAAgBF,QAGlDnB,IAAAC,cAACrB,EAAY,CAAC0C,GAAG,MACZd,EAAQM,YAAYX,OAEzBH,IAAAC,cAACnB,EAAe,KACX0B,EAAQM,YAAYS,UAEzBvB,IAAAC,cAAChB,EAAkB,KACduB,EAAQM,YAAYU,aAExBhB,EAAQM,YAAYW,iBAvCrBC,KAAqD,IACzEC,GADqB,GAAEC,EAAE,MAAEC,GAAyCH,EAOxE,OAJIC,EADAE,IAAUC,IAAUC,KACXvC,EAEAF,EAENU,IAAAC,cAAC0B,EAAM,CAACC,GAAIA,GAAI,cAiCKI,CAAoB,CAChBJ,GAAIpB,EAAQM,YAAYW,gBACxBI,MAAOrB,EAAQM,YAAYxC,mBAUhDoB","file":"component---src-pages-projects-tsx-d6c69e600c807987ba97.js","sourcesContent":["import { graphql } from 'gatsby';\nimport Img from 'gatsby-image';\nimport React from 'react';\nimport Fade from 'react-reveal/Fade';\n\nimport { DarkButton, LightButton, PageWrapper } from '../components/Common';\nimport Layout from '../components/Layout';\nimport { Title } from '../components/Typography';\nimport styled from '../lib/styled-components';\nimport { colors, media, textSize } from '../styles/common';\n// eslint-disable-next-line no-unused-vars\nimport { Project as ProjectType } from '../types/Project';\nimport { ThemeEnum } from '../utils/context';\n\ntype ProjectProps = {\n    textColor: ThemeEnum;\n};\n\nconst Project = styled.div<ProjectProps>`\n    padding: 120px 20px;\n    text-align: center;\n    color: ${props =>\n        props.textColor === 'light' ? colors.textBodyDark : colors.textBodyLight};\n\n    ${media.small`\n        padding: 80px 20px;\n    `};\n`;\n\nconst ProjectTitle = styled(Title)`\n    color: inherit;\n    margin-top: 40px;\n    margin-bottom: 0;\n\n    ${media.small`\n        margin-top: 20px;\n    `};\n`;\n\nconst ProjectSubtitle = styled.span`\n    ${textSize.small};\n    display: inline-block;\n    margin-bottom: 25px;\n`;\n\nconst ProjectDescription = styled.p`\n    ${textSize.normal};\n    width: 600px;\n    max-width: 100%;\n    margin: auto;\n`;\n\nconst ProjectImage = styled(Img)`\n    width: 450px;\n    margin: auto;\n    max-width: 100%;\n\n    ${media.small`\n        width: 300px;\n    `};\n`;\n\nconst LightProjectButton = styled(LightButton)`\n    margin-top: 40px;\n`;\n\nconst DarkProjectButton = styled(DarkButton)`\n    margin-top: 40px;\n`;\n\ntype ProjectsProps = {\n    data: {\n        allMdx: {\n            edges: ProjectType[];\n        };\n    };\n};\n\nconst renderProjectButton = ({ to, theme }: { to: string; theme: ThemeEnum }) => {\n    let Button;\n    if (theme === ThemeEnum.dark) {\n        Button = DarkProjectButton;\n    } else {\n        Button = LightProjectButton;\n    }\n    return <Button to={to}>Read more</Button>;\n};\n\nexport const Projects = ({\n    data: {\n        allMdx: { edges: projects }\n    }\n}: ProjectsProps) => {\n    return (\n        <Layout title=\"RY Xia | Projects\">\n            {projects.map(({ node: project }, index) => (\n                <Project\n                    key={project.fields.id}\n                    style={{ backgroundColor: project.frontmatter.backgroundColor }}\n                    textColor={project.frontmatter.textColor}\n                >\n                    <Fade {...(index % 2 === 0 ? { left: true } : { right: true })}>\n                        <PageWrapper>\n                            <ProjectImage\n                                fluid={\n                                    project.frontmatter.image.childImageSharp.fluid\n                                }\n                            />\n                            <ProjectTitle as=\"h2\">\n                                {project.frontmatter.title}\n                            </ProjectTitle>\n                            <ProjectSubtitle>\n                                {project.frontmatter.subtitle}\n                            </ProjectSubtitle>\n                            <ProjectDescription>\n                                {project.frontmatter.description}\n                            </ProjectDescription>\n                            {project.frontmatter.detailsPageLink &&\n                                renderProjectButton({\n                                    to: project.frontmatter.detailsPageLink,\n                                    theme: project.frontmatter.textColor\n                                })}\n                        </PageWrapper>\n                    </Fade>\n                </Project>\n            ))}\n        </Layout>\n    );\n};\n\nexport default Projects;\n\nexport const pageQuery = graphql`\n    query {\n        allMdx(\n            filter: { fields: { slug: { eq: null } } }\n            sort: { order: DESC, fields: [frontmatter___date] }\n        ) {\n            edges {\n                node {\n                    fields {\n                        id\n                        slug\n                    }\n                    frontmatter {\n                        title\n                        subtitle\n                        description\n                        backgroundColor\n                        textColor\n                        detailsPageLink\n                        image {\n                            childImageSharp {\n                                fluid(maxWidth: 500) {\n                                    ...GatsbyImageSharpFluid\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n"],"sourceRoot":""}
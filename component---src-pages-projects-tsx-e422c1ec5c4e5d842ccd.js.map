{"version":3,"sources":["webpack:///./src/pages/projects.tsx"],"names":["Project","styled","div","_templateObject","_taggedTemplateLiteralLoose","props","textColor","colors","textBodyDark","textBodyLight","media","small","_templateObject2","ProjectTitle","Title","_templateObject3","_templateObject4","ProjectSubtitle","span","_templateObject5","textSize","ProjectDescription","p","_templateObject6","normal","ProjectImage","Img","_templateObject7","_templateObject8","LightProjectButton","LightButton","_templateObject9","DarkProjectButton","DarkButton","_templateObject10","Projects","_ref2","projects","data","allMdx","edges","React","createElement","Layout","title","map","_ref3","index","_ref","Button","to","project","node","key","fields","id","style","backgroundColor","frontmatter","Fade","left","right","PageWrapper","fluid","image","childImageSharp","as","subtitle","description","detailsPageLink","theme","ThemeEnum","dark"],"mappings":"sTAkBMA,EAAUC,IAAOC,IAAGC,MAAAC,YAAA,0FAGb,SAAAC,GAAK,MACU,UAApBA,EAAMC,UAAwBC,IAAOC,aAAeD,IAAOE,gBAE7DC,IAAMC,MAAKC,MAAAR,YAAA,4CAKXS,EAAeZ,YAAOa,IAAPb,CAAac,MAAAX,YAAA,wFAK5BM,IAAMC,MAAKK,MAAAZ,YAAA,0CAKXa,EAAkBhB,IAAOiB,KAAIC,MAAAf,YAAA,yEAC7BgB,IAAST,OAKTU,EAAqBpB,IAAOqB,EAACC,MAAAnB,YAAA,+EAC7BgB,IAASI,QAMTC,EAAexB,YAAOyB,IAAPzB,CAAW0B,MAAAvB,YAAA,iFAK1BM,IAAMC,MAAKiB,MAAAxB,YAAA,sCAKXyB,EAAqB5B,YAAO6B,IAAP7B,CAAmB8B,MAAA3B,YAAA,iCAIxC4B,EAAoB/B,YAAOgC,IAAPhC,CAAkBiC,MAAA9B,YAAA,iCAsB/B+B,EAAW,SAAHC,GAIA,IAFIC,EAAQD,EAD7BE,KACIC,OAAUC,MAGd,OACIC,IAAAC,cAACC,IAAM,CAACC,MAAM,qBACTP,EAASQ,KAAI,SAAAC,EAAoBC,GAAK,IAjB1BC,EACjBC,EADuBC,EAiBIC,EAAOL,EAAbM,KAAI,OACjBX,IAAAC,cAAC1C,EAAO,CACJqD,IAAKF,EAAQG,OAAOC,GACpBC,MAAO,CAAEC,gBAAiBN,EAAQO,YAAYD,iBAC9CnD,UAAW6C,EAAQO,YAAYpD,WAE/BmC,IAAAC,cAACiB,IAAUZ,EAAQ,GAAM,EAAI,CAAEa,MAAM,GAAS,CAAEC,OAAO,GACnDpB,IAAAC,cAACoB,IAAW,KACRrB,IAAAC,cAACjB,EAAY,CACTsC,MACIZ,EAAQO,YAAYM,MAAMC,gBAAgBF,QAGlDtB,IAAAC,cAAC7B,EAAY,CAACqD,GAAG,MACZf,EAAQO,YAAYd,OAEzBH,IAAAC,cAACzB,EAAe,KACXkC,EAAQO,YAAYS,UAEzB1B,IAAAC,cAACrB,EAAkB,KACd8B,EAAQO,YAAYU,aAExBjB,EAAQO,YAAYW,kBAvCxBrB,EAwC2B,CAChBE,GAAIC,EAAQO,YAAYW,gBACxBC,MAAOnB,EAAQO,YAAYpD,WA1ChC4C,EAAEF,EAAFE,GAGvBD,EAHgCD,EAALsB,QAEjBC,IAAUC,KACXxC,EAEAH,EAENY,IAAAC,cAACO,EAAM,CAACC,GAAIA,GAAI,sBA6CZf","file":"component---src-pages-projects-tsx-e422c1ec5c4e5d842ccd.js","sourcesContent":["import { graphql } from 'gatsby';\nimport Img from 'gatsby-image';\nimport React from 'react';\nimport Fade from 'react-reveal/Fade';\n\nimport { DarkButton, LightButton, PageWrapper } from '../components/Common';\nimport Layout from '../components/Layout';\nimport { Title } from '../components/Typography';\nimport styled from '../lib/styled-components';\nimport { colors, media, textSize } from '../styles/common';\n// eslint-disable-next-line no-unused-vars\nimport { Project as ProjectType } from '../types/Project';\nimport { ThemeEnum } from '../utils/context';\n\ntype ProjectProps = {\n    textColor: ThemeEnum;\n};\n\nconst Project = styled.div<ProjectProps>`\n    padding: 120px 20px;\n    text-align: center;\n    color: ${props =>\n        props.textColor === 'light' ? colors.textBodyDark : colors.textBodyLight};\n\n    ${media.small`\n        padding: 80px 20px;\n    `};\n`;\n\nconst ProjectTitle = styled(Title)`\n    color: inherit;\n    margin-top: 40px;\n    margin-bottom: 0;\n\n    ${media.small`\n        margin-top: 20px;\n    `};\n`;\n\nconst ProjectSubtitle = styled.span`\n    ${textSize.small};\n    display: inline-block;\n    margin-bottom: 25px;\n`;\n\nconst ProjectDescription = styled.p`\n    ${textSize.normal};\n    width: 600px;\n    max-width: 100%;\n    margin: auto;\n`;\n\nconst ProjectImage = styled(Img)`\n    width: 450px;\n    margin: auto;\n    max-width: 100%;\n\n    ${media.small`\n        width: 300px;\n    `};\n`;\n\nconst LightProjectButton = styled(LightButton)`\n    margin-top: 40px;\n`;\n\nconst DarkProjectButton = styled(DarkButton)`\n    margin-top: 40px;\n`;\n\ntype ProjectsProps = {\n    data: {\n        allMdx: {\n            edges: ProjectType[];\n        };\n    };\n};\n\nconst renderProjectButton = ({ to, theme }: { to: string; theme: ThemeEnum }) => {\n    let Button;\n    if (theme === ThemeEnum.dark) {\n        Button = DarkProjectButton;\n    } else {\n        Button = LightProjectButton;\n    }\n    return <Button to={to}>Read more</Button>;\n};\n\nexport const Projects = ({\n    data: {\n        allMdx: { edges: projects }\n    }\n}: ProjectsProps) => {\n    return (\n        <Layout title=\"RY Xia | Projects\">\n            {projects.map(({ node: project }, index) => (\n                <Project\n                    key={project.fields.id}\n                    style={{ backgroundColor: project.frontmatter.backgroundColor }}\n                    textColor={project.frontmatter.textColor}\n                >\n                    <Fade {...(index % 2 === 0 ? { left: true } : { right: true })}>\n                        <PageWrapper>\n                            <ProjectImage\n                                fluid={\n                                    project.frontmatter.image.childImageSharp.fluid\n                                }\n                            />\n                            <ProjectTitle as=\"h2\">\n                                {project.frontmatter.title}\n                            </ProjectTitle>\n                            <ProjectSubtitle>\n                                {project.frontmatter.subtitle}\n                            </ProjectSubtitle>\n                            <ProjectDescription>\n                                {project.frontmatter.description}\n                            </ProjectDescription>\n                            {project.frontmatter.detailsPageLink &&\n                                renderProjectButton({\n                                    to: project.frontmatter.detailsPageLink,\n                                    theme: project.frontmatter.textColor\n                                })}\n                        </PageWrapper>\n                    </Fade>\n                </Project>\n            ))}\n        </Layout>\n    );\n};\n\nexport default Projects;\n\nexport const pageQuery = graphql`\n    query {\n        allMdx(\n            filter: { fields: { slug: { eq: null } } }\n            sort: { order: DESC, fields: [frontmatter___date] }\n        ) {\n            edges {\n                node {\n                    fields {\n                        id\n                        slug\n                    }\n                    frontmatter {\n                        title\n                        subtitle\n                        description\n                        backgroundColor\n                        textColor\n                        detailsPageLink\n                        image {\n                            childImageSharp {\n                                fluid(maxWidth: 500) {\n                                    ...GatsbyImageSharpFluid\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n"],"sourceRoot":""}